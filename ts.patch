From 322c9d1f8520b8b6b2a3a64ba1900ec690101979 Mon Sep 17 00:00:00 2001
From: Av32000 <59660601+Av32000@users.noreply.github.com>
Date: Fri, 22 Nov 2024 15:34:07 +0000
Subject: [PATCH] [TSAPI] Start Converting index.js

---
 apps/api/{ => src}/AccountsAPI.ts   | 12 ++---
 apps/api/{ => src}/AuthAPI.ts       |  3 +-
 apps/api/{ => src}/cmd.ts           |  8 ++--
 apps/api/{index.js => src/index.ts} | 72 +++++++++++++----------------
 apps/api/tsconfig.json              |  3 +-
 5 files changed, 47 insertions(+), 51 deletions(-)
 rename apps/api/{ => src}/AccountsAPI.ts (99%)
 rename apps/api/{ => src}/AuthAPI.ts (97%)
 rename apps/api/{ => src}/cmd.ts (93%)
 rename apps/api/{index.js => src/index.ts} (93%)

diff --git a/apps/api/AccountsAPI.ts b/apps/api/src/AccountsAPI.ts
similarity index 99%
rename from apps/api/AccountsAPI.ts
rename to apps/api/src/AccountsAPI.ts
index 34ceba3..1ea612d 100644
--- a/apps/api/AccountsAPI.ts
+++ b/apps/api/src/AccountsAPI.ts
@@ -10,8 +10,8 @@ import {
   rmSync,
   writeFileSync,
 } from "fs";
-import path = require("path");
-import JSZip = require("jszip");
+import path from "path";
+import JSZip from "jszip";
 
 const newAccountSchema = {
   id: 0,
@@ -27,7 +27,7 @@ const newAccountSchema = {
 
 const prisma = new PrismaClient();
 
-export class AccountsAPI {
+export default class AccountsAPI {
   accounts: Account[] = [];
   dataPath: string;
   filesPath: string;
@@ -371,9 +371,9 @@ export class AccountsAPI {
     type: ChartType,
     options:
       | {
-          name: string;
-          value: string;
-        }[]
+        name: string;
+        value: string;
+      }[]
       | undefined,
   ) {
     const id = randomUUID();
diff --git a/apps/api/AuthAPI.ts b/apps/api/src/AuthAPI.ts
similarity index 97%
rename from apps/api/AuthAPI.ts
rename to apps/api/src/AuthAPI.ts
index beb2be5..35ef705 100644
--- a/apps/api/AuthAPI.ts
+++ b/apps/api/src/AuthAPI.ts
@@ -9,7 +9,8 @@ type AuthData = {
   otpSecret: string
   devices: {
     credentialPublicKey: Uint8Array
-    credentialID: Uint8Array
+    credentialID: Uint8Array,
+    transports: string
   }[]
 }
 
diff --git a/apps/api/cmd.ts b/apps/api/src/cmd.ts
similarity index 93%
rename from apps/api/cmd.ts
rename to apps/api/src/cmd.ts
index 12f117d..d976d3a 100644
--- a/apps/api/cmd.ts
+++ b/apps/api/src/cmd.ts
@@ -1,6 +1,6 @@
 import { writeFileSync } from "fs";
 import { join } from "path";
-import { AccountsAPI } from "./AccountsAPI";
+import AccountsAPI from "./AccountsAPI";
 
 const readline = require("readline").createInterface({
   input: process.stdin,
@@ -57,7 +57,7 @@ export class Cmd {
                   path = join(path, accountData.name + ".zip");
                 writeFileSync(
                   path,
-                  await this.accountsAPI.ExportAccount(accountId),
+                  await this.accountsAPI.ExportAccount(accountId) as Buffer,
                 );
                 console.log("Account exported in " + path);
               } catch (error) {
@@ -66,11 +66,11 @@ export class Cmd {
             } else {
               writeFileSync(
                 join(__dirname, accountData.name + ".zip"),
-                await this.accountsAPI.ExportAccount(accountId),
+                await this.accountsAPI.ExportAccount(accountId) as Buffer,
               );
               console.log(
                 "Account exported in " +
-                  join(__dirname, accountData.name + ".zip"),
+                join(__dirname, accountData.name + ".zip"),
               );
             }
           } else {
diff --git a/apps/api/index.js b/apps/api/src/index.ts
similarity index 93%
rename from apps/api/index.js
rename to apps/api/src/index.ts
index 8ec2ffd..12de101 100644
--- a/apps/api/index.js
+++ b/apps/api/src/index.ts
@@ -1,34 +1,28 @@
-const fastify = require("fastify")({
+import Fastify from "fastify";
+import cors from "@fastify/cors";
+import multipart from "@fastify/multipart";
+import util from "util";
+import path from "path";
+import AccountsAPI from "./AccountsAPI";
+import { existsSync, createWriteStream, mkdirSync, readFileSync } from "fs";
+import { pipeline } from "stream";
+import { randomUUID } from "crypto";
+import fastifyJWT, { FastifyJwtNamespace } from "@fastify/jwt";
+import { generateAuthenticationOptions, generateRegistrationOptions, GenerateRegistrationOptionsOpts, verifyAuthenticationResponse, verifyRegistrationResponse, VerifyRegistrationResponseOpts } from "@simplewebauthn/server";
+import { isoBase64URL, isoUint8Array } from "@simplewebauthn/server/helpers";
+import AuthAPI from "./AuthAPI";
+
+declare module 'fastify' {
+  interface FastifyInstance extends
+    FastifyJwtNamespace<{ namespace: 'security' }> {
+  }
+}
+
+const fastify = Fastify({
   logger: {
-    level: "error",
-  },
-});
-const cors = require("@fastify/cors");
-const multipart = require("@fastify/multipart");
-const util = require("util");
-const path = require("path");
-const AccountsAPI = require("./AccountsAPI");
-const {
-  existsSync,
-  createWriteStream,
-  mkdirSync,
-  readFileSync,
-  writeFileSync,
-} = require("fs");
-const { pipeline } = require("stream");
-const { randomUUID } = require("crypto");
-const fastifyJWT = require("@fastify/jwt");
-const {
-  generateAuthenticationOptions,
-  generateRegistrationOptions,
-  verifyAuthenticationResponse,
-  verifyRegistrationResponse,
-} = require("@simplewebauthn/server");
-const {
-  isoBase64URL,
-  isoUint8Array,
-} = require("@simplewebauthn/server/helpers");
-const AuthAPI = require("./AuthAPI");
+    level: "error"
+  }
+})
 
 const insecure = process.argv.includes("--insecure");
 if (insecure) {
@@ -108,7 +102,7 @@ const unauthenticatedRoutes = [
 fastify.addHook("onRequest", async (request, reply) => {
   try {
     if (
-      !unauthenticatedRoutes.includes(request.raw.url) &&
+      !unauthenticatedRoutes.includes(request.raw.url as string) &&
       !insecure &&
       authAPI.data.devices.length > 0
     ) {
@@ -151,8 +145,8 @@ fastify.get("/generate-new-key-options", async (request, reply) => {
     attestationType: "none",
     excludeCredentials: devices.map((dev) => ({
       id: dev.credentialID,
-      type: "public-key",
-      transports: dev.transports,
+      type: "public-key" as "public-key",
+      transports: [dev.transports],
     })),
     authenticatorSelection: {
       residentKey: "discouraged",
@@ -160,7 +154,7 @@ fastify.get("/generate-new-key-options", async (request, reply) => {
       authenticatorAttachment: "cross-platform",
     },
     supportedAlgorithmIDs: [-7, -257],
-  };
+  } as GenerateRegistrationOptionsOpts;
 
   const options = await generateRegistrationOptions(opts);
   authAPI.SetChallenge(options.challenge);
@@ -180,8 +174,8 @@ fastify.post("/verify-new-key-registration", async (request, reply) => {
       expectedOrigin: authAPI.GetOrigin(),
       expectedRPID: authAPI.rpID,
       requireUserVerification: true,
-    };
-    verification = await verifyRegistrationResponse(opts);
+    } as VerifyRegistrationResponseOpts;
+    const verification = await verifyRegistrationResponse(opts);
   } catch (error) {
     console.error(error);
     return reply.status(400).send({ error: error.message });
@@ -533,9 +527,9 @@ fastify.delete(
 );
 
 // Files
-const mimeTypes = require("mime-types");
-const Cmd = require("./cmd");
-const { time } = require("console");
+import mimeTypes from "mime-types";
+import Cmd from "./cmd";
+import { time } from "console";
 fastify.get("/files/:file", async (request, reply) => {
   let file = request.params.file;
   file = file.replace(/[\\/]/g, "");
diff --git a/apps/api/tsconfig.json b/apps/api/tsconfig.json
index f33aae0..1e24761 100644
--- a/apps/api/tsconfig.json
+++ b/apps/api/tsconfig.json
@@ -6,5 +6,6 @@
     "paths": {
       "@ft-types/*": ["../../packages/types/src/*"]
     }
-  }
+  },
+  "include": ["src"]
 }
-- 
2.46.2

